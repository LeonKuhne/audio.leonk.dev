#!/bin/bash
title waves.leonk.dev
debug audio file dump

help .cd | indent

function load() {
  collect
  bin
}

# scan computer for audio and dump it in a bin
function collect() {
  info "collecting audio files $C_WARN(may take a second)"
  collected=0
  if [ ! -d bin ]; then mkdir bin; fi
  # recursive find all files
  find ~/Downloads ~/Desktop -type f \
    \( -name "*.mp3" -o -name "*.wav" \) \
    -print0 | while read -d $'\0' file
  do
    collected=$((collected+1))
    cp $file bin/
  done
  info "bin filled ($collected)"
}

# sort through bin and empty it
function bin() {
  # provide options
  idx=0
  for file in bin/*; do
    debug "$idx $(basename $file)"
    idx=$((idx+1))
    if [ $idx -gt 9 ]; then break; fi
  done
  # request input
  notice -n "select:" && echo " "
  read selected
  # move selected
  idx=0
  for file in bin/*; do
    if [[ $selected = *$idx* ]]; then
      warn "moving $idx $(basename $file)"
      insert $file
    fi
    rm $file
    idx=$((idx+1))
    if [ $idx -gt 9 ]; then break; fi
  done
  # delete or repeat
  if [ -z "$(ls bin)" ]; then
    rmdir bin
    info "bin emptied"
  else bin; fi
}

# insert audio
function insert() {
  # check if extension is wav
  if [[ $1 == *.wav ]]; then
    # convert to mp3
    filename=$(basename ${1%.*})
    ffmpeg -i $1 -acodec libmp3lame -ab 128k audio/$filename.mp3
  else
    cp $1 audio/
  fi
}

# $1 directory/file
# $2 indent
# $3 ignore first
function compile() {
  if [ -z "$1" ]; then
    err "usage: compile <directory> [indent] [ignore first]"
    return
  fi
  if [ ! -z "$3" ]; then
    for file in $1/*; do
      compile $file "$2"
    done
  # process non-empty directory
  elif [[ -d $1 ]] && ([ "$(ls -A $1)" ]); then
    echo "$2\"$(basename $1)\": {"
    for file in $1/*; do
      compile $file "$2  "
    done
    echo "$2},"
  # process file
  else
    if [[ $1 == *.mp3 ]]; then
      echo "$2\"$(basename ${1%.*})\": \"$1\","
    fi
  fi
}

# add audio to source
function build() {
  files=$(compile ./audio "  " true)
  # prevent unescaped newline inside substitute pattern
  files=$(echo -e $files | sed 's/\//\\\//g')
  # [autofill ./audio]
  substitution=$(
    echo -n 's#/(// \[autofill \./audio\]).*'
    echo -n "#\1 add '/' to rebuild\n"
    echo -n "$files#g"
  )
  cat src/script.js \
    | perl -pe "$substitution" \
    > src/script.js.tmp
  mv src/script.js.tmp src/script.js
  info "source updated"
}
